@page "/students"
@inject IJSRuntime JsRuntime
@inject IStudentData repository 

<h1>Students List</h1>
<hr />

<table class="studs-table">
    <thead  style="font-family:'Arial Rounded MT'">
        <tr>
            <th>Avatar</th>

            <th @onclick="SortByFirstName"><span class="text">First Name</span></th>

            <th @onclick="SortByLastName"><span class="text">Last Name</span></th>

            <th @onclick="SortByBirthDate"><span class="text">Birth Date</span></th>

            <th @onclick="SortByStudies"><span class="text">Studies</span></th>

        </tr>
    </thead>
    <tbody  style="font-family:'Arial Rounded MT'">
        @foreach (var student in students)
        {
            <tr>               
                <td><img src="@student.Avatar" class="stud-image"></td>
                <td>@student.FirstName</td>
                <td>@student.LastName</td>
                <td>@student.BirthDate.ToShortDateString()</td>
                <td>@student.Studies</td>
                <td>
                    <button @onclick="() => Show(student.ID)" class="stud-delete-button">&times;</button>
                    <a href="/students/@student.ID" class="stud-edit"><button>Edit</button></a>
                </td>            
            </tr>  
        }
    </tbody>
</table>

@foreach (var student in students)
{
    <div class="submition" id="submition-@student.ID">
        <div class="submitiom-content">
            <div class="header">
                <span class="title">Do you want to delete student with ID:@student.ID ?</span>
            </div>
            <from class="body" action="/students">
                <button @onclick="() => DeleteStudent(student.ID)" class="sub-button" type="submit">Yes</button>
                <button @onclick="Decline" class="sub-button">No</button>
            </from>
        </div>
    </div>
}

@code {
    private List<Student> students;

    protected override void OnInitialized()
    {
        students = StudentData.Students;
    }

    private async Task Show(int ID)
    {
        await JsRuntime.InvokeVoidAsync("show", ID);
    }

    private async Task Decline()
    {
        await JsRuntime.InvokeVoidAsync("decline");
    }

    private async Task Accept()
    {
        await JsRuntime.InvokeVoidAsync("accept");
    }

    private async Task DeleteStudent(int ID)
    {
        students.Remove(repository.FindStudent(ID));
        repository.DeleteStudent(ID);
        await Accept();
    }

    private bool order = true;
    private void SortByFirstName()
    {
        if (order == true)
        {
            students = students.OrderBy(student => student.FirstName).ToList();
            order = false;
        }
        else
        {
            students = students.OrderByDescending(students => students.FirstName).ToList();
            order = true;
        }
    }

    private void SortByLastName()
    {
        if (order == true)
        {
            students = students.OrderBy(student => student.LastName).ToList();
            order = false;
        }
        else
        {
            students = students.OrderByDescending(students => students.LastName).ToList();
            order = true;
        }
    }

    private void SortByBirthDate()
    {
        if (order == true)
        {
            students = students.OrderBy(student => student.BirthDate).ToList();
            order = false;
        }
        else
        {
            students = students.OrderByDescending(students => students.BirthDate).ToList();
            order = true;
        }
    }

    private void SortByStudies()
    {
        if (order == true)
        {
            students = students.OrderBy(student => student.Studies).ToList();
            order = false;
        }
        else
        {
            students = students.OrderByDescending(students => students.Studies).ToList();
            order = true;
        }
    }
}